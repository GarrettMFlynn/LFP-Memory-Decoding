
%% Iterate Through ML
% This script iterates through the ML methods specified in dashboard.m
% using the data generated by HHDataStructure.m --> prepareForML.m

                                                                            % Project: USC RAM
                                                                            % Author: Garrett Flynn and Xiwei She
                                                                            % Date: July 26th, 2019

if exist('dataML', 'var')

 % Choose ML Methods
 kMeans = ~isempty(cell2mat(regexpi(mlAlgorithms,{'kMeans'})));
 if kMeans 
     
 warning('kMeans is not supported for new featureset. Please recode this section if you wish to conduct unsupervised classification.');    
 
 end
 
 supervisedMethods = zeros(1,length(mlAlgorithms));
 for algIter = 1:length(mlAlgorithms)
     match = cell2mat(regexpi(mlAlgorithms{algIter},{'lassoGLM','naiveBayes','SVM','linear','kernel','knn','tree','RUSBoost'}));
     if ~isempty(match)
 supervisedMethods(algIter) =  match;
     end
     end
 supervisedMethods = (sum(supervisedMethods)) > 0;
 imageMethods = ~isempty(cell2mat(regexpi(mlAlgorithms,{'CNN_SVM'})));
 
 
 % Initialize Save Directories and Other Parameters
        if supervisedMethods
            resultsDir = fullfile(parameters.Directories.filePath,['Classifier Results [-',num2str(range),' ',num2str(range),']']);
            collectMCC = [];
        end
        
        if kMeans
            kResultsDir =  fullfile(parameters.Directories.filePath,['kMeans Results [-',num2str(range),' ',num2str(range),']']);
            saveBars = fullfile(parameters.Directories.filePath,'MCC Bar Plots');
            
            realClust = realClusters(dataML.Labels);
            savePCAViz = fullfile(parameters.Directories.filePath,'PCA Scatter Plots');
        end
        
        count = 1;
        
        channelStandard = dataML.Channels.sChannels;
        
for chosenFormat = 1:length(dataFormat)
    format = dataFormat{chosenFormat};
    currentData = dataML.(format);
        [f,t,c,tr] = size(currentData);
    d = f*t;
  
    if ~isempty(regexpi(format,'Signal'))
    typeIn = 'Signal';
    elseif ~isempty(regexpi(format,'Spectrum'))
        typeIn = 'Spectrum';
    else
        error('Input not supported');
    end
    
%% PCA Channel Reduction
if parameters.Choices.reduceChannels   
channelPCA = zeros(f, t, 2,tr);

numPreviousSaved = 0;
for CA1vsCA3 = 1:2
    if CA1vsCA3 == 1
        currentChans = dataML.Channels.CA1_Channels;
    elseif CA1vsCA3 == 2
        currentChans = dataML.Channels.CA3_Channels;
    end
    disc = sum(diff(currentChans)>1)+1; % Find the number of channel clusters
    cSave = 1:disc; % Pull out that many components from PCA
    
     if CA1vsCA3 == 1
         cChoice = find(ismember(channelStandard,dataML.Channels.CA1_Channels));
     elseif CA1vsCA3 == 2
     cChoice = find(ismember(channelStandard,dataML.Channels.CA3_Channels));
     end
     
for trial = 1:tr
    for freq = 1:f
           tempTimeChannel = squeeze(currentData(freq,:,cChoice,trial));
           [~, scoreTemp, ~,~,explained(:,trial*freq),~] = pca(tempTimeChannel);
           channelPCA(freq,:,numPreviousSaved+cSave,trial) = scoreTemp(:, cSave); % Only pick the first 3 PCs due to channel spacing   
    end
end

numPreviousSaved = numPreviousSaved + length(cSave);
% figure;
% histogram(explained(1,:))
clear explained
clear scoreTemp
clear tempTimeChannel
end 
currentData = channelPCA;
    [f,t,c,tr] = size(currentData);
    d = f*t;
clear channelPCA
    
end
    
    
signalOn = 0; % Assume Signal is Off   
if strcmp(typeIn,'Spectrum')
%% Method One: Unfold Time & Frequency Components into Vectors (or leave as is)
        temp = permute(currentData,[4,3,2,1]);
        dataPermute = temp(:,:,:);
        featureMatrix.dataPermute.(format) =  permute(dataPermute,[1,3,2]);
        clear temp
        
        % Use the following code to reverse a given trial/electrode
        %reshaped = reshape(dataML.Data(1,1,:),size(temp,3),size(temp,4))';
        
%% Method Two: Compress Each Interval-Channel Combination into its First PC
pcaParsed = zeros(size(currentData, 2), size(currentData, 3), size(currentData, 4));
        for channel = 1:c
            for trial = 1:tr
                tempFreqTime = currentData(:, :, channel, trial);
                [~, scoreTemp, ~] = pca(tempFreqTime');
                pcaParsed(:, channel, trial) = scoreTemp(:, 1); % Only pick the first PC due to the dimension limit
            end
        end
       
       featureMatrix.pcaParsed.(format) = permute(pcaParsed, [3, 1, 2]); % Set the dimension order as Trial * Time(Feature) * Neuron for the B-Spline input
       
       clear tempFreqTime
       clear scoreTemp
       
elseif strcmp(typeIn,'Signal')    
%% Method Four: Signals Only
featureMatrix.Signals.(format) = dataML.(format);

signalOn = 1;

% Visualization of Signal Data
    % if ndims(dataML.Data) == 3
    %     TrialChannelData_Visualization(dataML.Data,dataML.Labels,{channelStandard,iCA1,dataML.Channels.CA3_Channels},fullfile(parameters.Directories.filePath,'Region Signal Responses',chosenFormat)
    % end
    
    
    
end
end

%% Begin Iterations
 % Populate Feature Matrix with Other DataML Info      
                   featureMatrix.Channels = dataML.Channels;
                   featureMatrix.Directory = dataML.Directory;
                   featureMatrix.Labels = dataML.Labels;
                   featureMatrix.WrongResponse = dataML.WrongResponse;
                   featureMatrix.Times = dataML.Times;
    
            for method = 1:length(mlScope)
                name = mlScope{method};
                
                %% Switch Between MCA, CA1, and CA3 Methods
                    fprintf(['\n',name,'\n']);
                    switch name
                        case 'MCA'
                    channelChoices = dataML.Channels.sChannels;
                        case 'CA1'
                    channelChoices = dataML.Channels.CA1_Channels;
                        case 'CA3'
                    channelChoices = dataML.Channels.CA3_Channels;      
                    end
                
                    
                resCount = 1;    
                for resolutions_to_retain = resChoice
                    coeffIter = 1;
                    coeffCount = 1;
                     for coeffRanks_to_retain = coeffIter
                           retained = [];
                           retainCache = length(channelChoices)-1; % Amount of PCA Components Available
                   %% BSpline Features
                    if bspline
                        
                        specFields = fieldnames(featureMatrix.pcaParsed); % Check fields in pcaParsed as a proxy for all spectral featuresets
                        
                        for specIter = 1:length(specFields)
                            
                         % Permute (concatenate) data
                         saveCase = [specFields{specIter},'_dataPermute'];
                            BSplineInput1 = featureMatrix.dataPermute.(specFields{specIter});
                            MCA_BSFeatures_Permute = InputTensor2BSplineFeatureMatrix(BSplineInput1,resolutions_to_retain,BSOrder);
                            featureMatrix.Data.(saveCase) = MCA_BSFeatures_Permute;
                            clear MCA_BSFeatures_Permute
                            
                            % PCA parsed data
                            saveCase = [specFields{specIter},'_pcaParsed'];
                            BSplineInput2 = featureMatrix.pcaParsed.(specFields{specIter});
                            MCA_BSFeatures_PCA = InputTensor2BSplineFeatureMatrix(BSplineInput2,resolutions_to_retain,BSOrder);
                            featureMatrix.Data.(saveCase) = MCA_BSFeatures_PCA;
                            clear MCA_BSFeatures_PCA
                        end   
                            % Bspline on Pure Signals
                            if signalOn
                                sigFields = fieldnames(featureMatrix.Signals);
                                
                                for sigIter = 1:length(sigFields)
                            BSplineInput3 = featureMatrix.Signals.(sigFields{sigIter});
                            BSplineInput3 = permute(squeeze(BSplineInput3), [3, 1, 2]);
                            MCA_BSFeatures_Signal = InputTensor2BSplineFeatureMatrix(BSplineInput3,resolutions_to_retain,BSOrder);
                            featureMatrix.Data.(sigFields{sigIter}) = MCA_BSFeatures_Signal;
                            clear MCA_BSFeatures_Signal
                                end
                            end
                            
                            indVar = 'BSpline Resolution';

                        
                    end

                    
                    %% Classification Section
                    
                    % Run K-Means: Does not work with new feature set
%                     if kMeans
%                         quickSNE
%                         [kResults.(name).(featureCounter).clusterIndices] = kMeansClustering(featureMatrix,name);
%                         saveBarsFull = fullfile(saveBars,name,featureCounter);
%                         [kResults.(name).(featureCounter).MCC,kResults.(name).(featureCounter).MCC_Categories,~,~] = parseClusterAssignments(featureMatrix,kResults.(name).(featureCounter).clusterIndices, name,{featureMatrix.Labels,retained,name,norm(iter),saveBarsFull});
%                         count = count + 1;
%                     end
                    
                  % Run Supervised Classifiers
                    if supervisedMethods
                        [collectMCC,learners, categories,featureCases] = trainClassifiers(featureMatrix,mlAlgorithms,collectMCC,coeffCount,resCount);
                        cResults.(name) = collectMCC;
                        
                cResults.MetaData.usedLearners = learners;
                cResults.MetaData.usedCategories = categories;
                cResults.MetaData.caseNames = featureCases;
                cResults.MetaData.Resolutions = resChoice;
                cResults.MetaData.pcaCoefficients = retainCache;
                saveNameTemp = dataFormat(chosenFormat);
                
                if ~exist(resultsDir,'dir')
                mkdir(resultsDir);
                end

                save(fullfile(resultsDir,['singleTestResult_',datestr(now,'mm-dd-yyyy HH-MM'),'.mat']), 'cResults', '-v7.3');
                end
                    
                    coeffCount = coeffCount + 1;
                     end
                     
                    resCount =resCount + 1;
                end
            end
            
            %% Organize Results
            if kMeans 
                %kSave
            end
            if supervisedMethods
                %classSave;
                %visualizeClassifierPerformance(cResults,norm(iter),fullfile(resultsDir,['MCCs for ',feature]));
            end
    clear cResults
    clear kResults
            
end

%% PCA 2D/3D Visualizations

%[kResults.(name).(featureCounter).MCC,kResults.(name).(featureCounter).MCC_Categories,collectedClusterings(:,count),excluded{count}] = parseClusterAssignments(featureMatrix,kResults.(name).(featureCounter).clusterIndices, name,{featureMatrix.Labels,retained,name,norm(iter),saveBarsFull});
%                             if coeffRanks_to_retain ==  2
%                                 PCA2CountMCA = count;
%                             elseif coeffRanks_to_retain ==  3
%                                 for len = 1:size(collectedClusterings,1)
%                                     orderedClustersMCA_PCA = [collectedClusterings(len,PCA2CountMCA) , collectedClusterings(len,count)];
%                                     excludedMCA_PCA = {excluded{PCA2CountMCA} , excluded{count}};
%                                     label = 'All Above';
%                                     createPCAVisualizations(scoreMCA,orderedClustersMCA_PCA,['MCA ' ,label,' ', num2str(nIters-(len-1))],norm(iter),fullfile(savePCAViz,['MCA_' label]),excludedMCA_PCA);
%                                     createPCAVisualizations_RealClusters(scoreMCA,realClust,'MCA Correct Cluster',norm(iter),fullfile(savePCAViz,['CorrectMCA_' label]),fieldnames(dataML.Labels));
%                                     
%                                 end
%                             end
%                             count = count + 1;
            
            
    
    
%% CNN For Feature Selection (on hiatus)
%     if CNN_SVM
%         CNN_Pipeline;
%         processAllClassestoResults(results,'CNN_SVM');
%         supervisedDir = fullfile(parameters.Directories.filePath,'CNN Results');
%         
%         if ~exist(supervisedDir,'dir')
%             mkdir(supervisedDir);
%         end
%         if norm(iter) == 1
%             save(fullfile(supervisedDir,[parameters.Directories.dataName, 'ResultsNorm.mat']),'results');
%         else
%             save(fullfile(supervisedDir,[parameters.Directories.dataName, 'Results.mat']),'results');
%         end
%     end